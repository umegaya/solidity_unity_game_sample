// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Card.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ch {

  /// <summary>Holder for reflection information generated from Card.proto</summary>
  public static partial class CardReflection {

    #region Descriptor
    /// <summary>File descriptor for Card.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CardReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpDYXJkLnByb3RvEgJjaCI8CgRDYXJkEg8KB3NwZWNfaWQYASABKA0SFAoM",
            "dmlzdWFsX2ZsYWdzGAIgASgNEg0KBWxldmVsGAMgASgNYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ch.Card), global::Ch.Card.Parser, new[]{ "SpecId", "VisualFlags", "Level" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Card : pb::IMessage<Card> {
    private static readonly pb::MessageParser<Card> _parser = new pb::MessageParser<Card>(() => new Card());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Card> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ch.CardReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card(Card other) : this() {
      specId_ = other.specId_;
      visualFlags_ = other.visualFlags_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card Clone() {
      return new Card(this);
    }

    /// <summary>Field number for the "spec_id" field.</summary>
    public const int SpecIdFieldNumber = 1;
    private uint specId_;
    /// <summary>
    ///card's spec (cost/hp/atk/def/speed...)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpecId {
      get { return specId_; }
      set {
        specId_ = value;
      }
    }

    /// <summary>Field number for the "visual_flags" field.</summary>
    public const int VisualFlagsFieldNumber = 2;
    private uint visualFlags_;
    /// <summary>
    ///special effect, different graphic, for same card. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VisualFlags {
      get { return visualFlags_; }
      set {
        visualFlags_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private uint level_;
    /// <summary>
    ///stack level. like CoC. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Card);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Card other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpecId != other.SpecId) return false;
      if (VisualFlags != other.VisualFlags) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpecId != 0) hash ^= SpecId.GetHashCode();
      if (VisualFlags != 0) hash ^= VisualFlags.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpecId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SpecId);
      }
      if (VisualFlags != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(VisualFlags);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpecId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpecId);
      }
      if (VisualFlags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VisualFlags);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Card other) {
      if (other == null) {
        return;
      }
      if (other.SpecId != 0) {
        SpecId = other.SpecId;
      }
      if (other.VisualFlags != 0) {
        VisualFlags = other.VisualFlags;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpecId = input.ReadUInt32();
            break;
          }
          case 16: {
            VisualFlags = input.ReadUInt32();
            break;
          }
          case 24: {
            Level = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
