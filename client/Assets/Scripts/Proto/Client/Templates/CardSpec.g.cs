// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Templates/CardSpec.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ch {

  /// <summary>Holder for reflection information generated from Templates/CardSpec.proto</summary>
  public static partial class CardSpecReflection {

    #region Descriptor
    /// <summary>File descriptor for Templates/CardSpec.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CardSpecReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhUZW1wbGF0ZXMvQ2FyZFNwZWMucHJvdG8SAmNoGg9DU1ZTY2hlbWEucHJv",
            "dG8ifAoIQ2FyZFNwZWMSEgoCaWQYASABKA1CBoK1GAIIARIQCghpc3N1YW5j",
            "ZRgCIAEoDRIKCgJocBgDIAEoDRIOCgZhdHRhY2sYBCABKA0SDwoHZGVmZW5z",
            "ZRgFIAEoDRINCgVmbGFncxgGIAEoDRIOCgZza2lsbHMYByADKA1iBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Suntomi.Pb.CSVSchemaReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ch.CardSpec), global::Ch.CardSpec.Parser, new[]{ "Id", "Issuance", "Hp", "Attack", "Defense", "Flags", "Skills" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CardSpec : pb::IMessage<CardSpec> {
    private static readonly pb::MessageParser<CardSpec> _parser = new pb::MessageParser<CardSpec>(() => new CardSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ch.CardSpecReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardSpec(CardSpec other) : this() {
      id_ = other.id_;
      issuance_ = other.issuance_;
      hp_ = other.hp_;
      attack_ = other.attack_;
      defense_ = other.defense_;
      flags_ = other.flags_;
      skills_ = other.skills_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardSpec Clone() {
      return new CardSpec(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "issuance" field.</summary>
    public const int IssuanceFieldNumber = 2;
    private uint issuance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Issuance {
      get { return issuance_; }
      set {
        issuance_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 3;
    private uint hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "attack" field.</summary>
    public const int AttackFieldNumber = 4;
    private uint attack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Attack {
      get { return attack_; }
      set {
        attack_ = value;
      }
    }

    /// <summary>Field number for the "defense" field.</summary>
    public const int DefenseFieldNumber = 5;
    private uint defense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Defense {
      get { return defense_; }
      set {
        defense_ = value;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 6;
    private uint flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "skills" field.</summary>
    public const int SkillsFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_skills_codec
        = pb::FieldCodec.ForUInt32(58);
    private readonly pbc::RepeatedField<uint> skills_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Skills {
      get { return skills_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Issuance != other.Issuance) return false;
      if (Hp != other.Hp) return false;
      if (Attack != other.Attack) return false;
      if (Defense != other.Defense) return false;
      if (Flags != other.Flags) return false;
      if(!skills_.Equals(other.skills_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Issuance != 0) hash ^= Issuance.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (Attack != 0) hash ^= Attack.GetHashCode();
      if (Defense != 0) hash ^= Defense.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      hash ^= skills_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Issuance != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Issuance);
      }
      if (Hp != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Hp);
      }
      if (Attack != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Attack);
      }
      if (Defense != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Defense);
      }
      if (Flags != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Flags);
      }
      skills_.WriteTo(output, _repeated_skills_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Issuance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Issuance);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hp);
      }
      if (Attack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Attack);
      }
      if (Defense != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Defense);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      size += skills_.CalculateSize(_repeated_skills_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardSpec other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Issuance != 0) {
        Issuance = other.Issuance;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.Attack != 0) {
        Attack = other.Attack;
      }
      if (other.Defense != 0) {
        Defense = other.Defense;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      skills_.Add(other.skills_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Issuance = input.ReadUInt32();
            break;
          }
          case 24: {
            Hp = input.ReadUInt32();
            break;
          }
          case 32: {
            Attack = input.ReadUInt32();
            break;
          }
          case 40: {
            Defense = input.ReadUInt32();
            break;
          }
          case 48: {
            Flags = input.ReadUInt32();
            break;
          }
          case 58:
          case 56: {
            skills_.AddEntriesFrom(input, _repeated_skills_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
